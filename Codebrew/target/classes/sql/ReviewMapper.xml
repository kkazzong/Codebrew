<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<mapper namespace="ReviewMapper">

<!-- review 관련하여 필요한 review Table 조회 : review(VO)는 user domain 객체와 festival domain 객체를 가진다. -->

	<!-- TTL : 13 in the class , 13 Columns in the DB -->
	<resultMap id="reviewSelectMap" type="review">
		<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
		<result property="festivalNo" column="festival_no" jdbcType="NUMERIC"/>
		<result property="festivalName" column="festival_name" jdbcType="VARCHAR"/>
		<result property="addr" column="addr" jdbcType="VARCHAR"/>
		<result property="checkCode" column="check_code" jdbcType="VARCHAR"/>
		<result property="reviewTitle" column="review_title" jdbcType="VARCHAR"/>
		<!-- <result property="goodCount" column="good_count" jdbcType="NUMERIC"/> -->
		<result property="reviewFestivalRating" column="review_festival_rating" jdbcType="NUMERIC"/>
		<result property="reviewDetail" column="review_detail" jdbcType="VARCHAR"/>
		<result property="reviewHashtag" column="review_hashtag" jdbcType="VARCHAR"/>
		<result property="reviewRegDate" column="review_reg_date" jdbcType="DATE"/>
		<!-- <result property="deleteFlag" column="delete_flag" jdbcType="VARCHAR"/> -->
		
		<!-- TTL : 5 Fields in the class , 5 Columns in the DB -->
		<collection property="replyList" ofType="reply">
			<result property="replyNo" column="reply_no" jdbcType="NUMERIC"/>
			<result property="userId" column="reply_user_id" jdbcType="VARCHAR"/>
			<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
			<result property="replyDetail" column="reply_detail" jdbcType="VARCHAR"/>
			<result property="replyRegDate" column="reply_reg_date" jdbcType="DATE"/>
		</collection>
		<!-- TTL : 3 Fields in the class , 3 Columns in the DB -->
		<collection property="reviewImageList" ofType="image">
			<result property="imageNo" column="image_no" jdbcType="NUMERIC"/>
			<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
			<result property="reviewImage" column="review_image" jdbcType="VARCHAR"/>
		</collection>
		<!-- TTL : 3 Fields in the class , 3 Columns in the DB -->
		<collection property="reviewVideoList" ofType="video">
			<result property="videoNo" column="video_no" jdbcType="NUMERIC"/>
			<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
			<result property="reviewVideo" column="review_video" jdbcType="VARCHAR"/>
		</collection>
		
	</resultMap>
	
	<resultMap id="replySelectMap" type="reply">
		<result property="replyNo" column="reply_no" jdbcType="NUMERIC"/>
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
		<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
		<result property="replyDetail" column="reply_detail" jdbcType="VARCHAR"/>
		<result property="replyRegDate" column="reply_reg_date" jdbcType="DATE"/>
	</resultMap>
	
	<resultMap id="imageSelectMap" type="image">
		<result property="imageNo" column="image_no" jdbcType="NUMERIC"/>
		<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
		<result property="reviewImage" column="review_image" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="videoSelectMap" type="video">
		<result property="videoNo" column="video_no" jdbcType="NUMERIC"/>
		<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
		<result property="reviewVideo" column="review_video" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="goodSelectMap" type="good">
		<result property="goodNo" column="good_no" jdbcType="NUMERIC"/>
		<result property="reviewNo" column="review_no" jdbcType="NUMERIC"/>
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
	</resultMap>
	
	<!-- TTL : 13EA -->
	<insert id="addReview" parameterType="review" useGeneratedKeys="true" keyProperty="reviewNo" keyColumn="review_no">
		INSERT 
			INTO review (
						review_no, 
						user_id, 
						festival_no, 
						festival_name, 
						addr, 
						check_code, 
						review_title, 
						good_count, 
						review_festival_rating, 
						review_detail, 
						review_hashtag, 
						review_reg_date, 
						delete_flag
						)
			VALUES 	(
					seq_review_review_no.nextval, 
					#{userId:VARCHAR}, 
					#{festivalNo:VARCHAR}, 
					#{festivalName:VARCHAR}, 
					#{addr:VARCHAR}, 
					'1', 
					#{reviewTitle:VARCHAR}, 
					0, 
					#{reviewFestivalRating:NUMERIC}, 
					#{reviewDetail:VARCHAR}, 
					#{reviewHashtag:VARCHAR}, 
					SYSDATE, 
					'1'
					)
	</insert>
	
	<insert id="uploadReviewImage" parameterType="map" useGeneratedKeys="true" keyProperty="imageNo" keyColumn="image_no">
		INSERT 
			INTO image 	(
						image_no, 
						review_no, 
						review_image
						)
		VALUES( seq_image_image_no.nextval, #{reviewNo}, #{reviewImage.reviewImage:VARCHAR})
	</insert>
	
	<insert id="uploadReviewVideo" parameterType="map" useGeneratedKeys="true" keyProperty="videoNo" keyColumn="video_no">
		INSERT 
			INTO video 	(
						video_no, 
						review_no, 
						review_video
						)
		VALUES( seq_video_video_no.nextval, #{reviewNo}, #{reviewVideo.reviewVideo:VARCHAR})
	</insert>
	
	
	<update id="passCheckCode" parameterType="string">
		UPDATE review SET
			<if test="checkCode==1">
				check_code = '2'			
			</if>
			<if test="checkCode==11">
				check_code = '22'
			</if>
		WHERE review_no=#{reviewNo}
	</update>

	
	<update id="failCheckCode" parameterType="string">
		UPDATE review SET
			<if test = "checkCode==1">
				check_code = '4'			
			</if>
			<if test = "checkCode==11">
				check_code='44'
			</if>
		WHERE review_no=#{reviewNo}
	</update>
	
	
	
	<select id="getReview" parameterType="int" resultMap="reviewSelectMap">
		SELECT
			rv.review_no, 
			rv.user_id, 
			rv.festival_no,
			rv.festival_name, 
			rv.addr, 
			rv.check_code, 
			rv.review_title, 
			rv.review_festival_rating, 
			rv.review_detail, 
			rv.review_hashtag, 
			rv.review_reg_date, 
			rp.reply_no, 
			rp.user_id AS reply_user_id, 
			rp.reply_detail, 
			rp.reply_reg_date, 
			i.review_image, 
			v.review_video, 
			g.good_count 
		FROM review rv, festival f, 
			(SELECT image_no, review_no, review_image FROM image WHERE review_no=#{reviewNo} ORDER BY review_no DESC) i, 
			(SELECT video_no, review_no, review_video FROM video WHERE review_no=#{reviewNo} ORDER BY video_no DESC) v, 
			(SELECT COUNT(good_no) good_count FROM good WHERE review_no=#{reviewNo}) g, 
			(SELECT reply_no, review_no, user_id, reply_detail, reply_reg_date FROM reply WHERE review_no=#{reviewNo} ORDER BY reply_no DESC) rp
		WHERE rv.review_no=rp.review_no(+) 
		AND rv.review_no=i.review_no(+) 
		AND rv.review_no=v.review_no(+) 
		AND rv.festival_no = f.festival_no
		AND rv.review_no=#{reviewNo}
	</select>
	
	<!-- 
	old version
	delete_flag, festival_name, addr ???
	<select id="getReview" parameterType="int" resultMap="reviewSelectMap">
		SELECT
			rv.review_no, 
			rv.user_id, 
			rv.festival_no,
			rv.festival_name, 
			rv.addr, 
			rv.check_code, 
			rv.review_title, 
			rv.good_count, 
			rv.review_festival_rating, 
			rv.review_detail, 
			rv.review_hashtag, 
			rv.review_reg_date, 
			rp.reply_no, 
			rp.user_id AS reply_user_id, 
			rp.reply_detail, 
			rp.reply_reg_date, 
			i.review_image, 
			v.review_video, 
			g.count_good 
		FROM review rv, festival f, 
			(SELECT image_no, review_no, review_image FROM image WHERE review_no=#{reviewNo} ORDER BY review_no DESC) i, 
			(SELECT video_no, review_no, review_video FROM video WHERE review_no=#{reviewNo} ORDER BY video_no DESC) v, 
			(SELECT good_no, review_no, user_id FROM good WHERE review_no=#{reviewNo}) g, 
			(SELECT reply_no, review_no, user_id, reply_detail, reply_reg_date FROM reply WHERE review_no=#{reviewNo} ORDER BY reply_no DESC) rp
		WHERE rv.review_no=rp.review_no(+) 
		AND rv.review_no=i.review_no(+) 
		AND rv.review_no=v.review_no(+) 
		AND rv.review_no=g.review_no(+)
		AND rv.festival_no = f.festival_no
		AND rv.review_no=#{reviewNo}
	</select>
	 -->
	
	
	<select id="getReviewImage" parameterType="int" resultMap="imageSelectMap">
		SELECT
			image_no, 
			review_no, 
			review_image
		FROM image 
		WHERE review_no=#{reviewNo}
	</select>
	
	
	<select id="getReviewVideo" parameterType="int" resultMap="videoSelectMap">
		SELECT
			video_no, 
			review_no, 
			review_video
		FROM image 
		WHERE review_no=#{reviewNo}
	</select>
	
	
	<!-- deleteReview -->
	<update id="deleteReview" parameterType="int">
		UPDATE review SET
			delete_flag = '4'
		WHERE review_no = #{reviewNo}
	</update>
	
	
	<insert id="addGood" parameterType="user">
		INSERT 
			INTO good 	(
						good_no, 
						review_no, 
						user_id
						) 
			VALUES 	(
					seq_good_good_no.nextval, 
					#{reviewNo}, 
					#{userId}
					)
	</insert>
	
	
	<delete id="deleteGood" parameterType="int">
		DELETE from good
		WHERE good_no = #{goodNo}
	</delete>
	
	  
	  <select id="getReviewList" parameterType="search" resultMap="reviewSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
				FROM ( SELECT  rv.review_no, 
								rv.festival_name, 
								rv.review_title, 
								rv.addr, 
								rv.review_hashtag, 
								i.review_image
						FROM review rv, ( SELECT * FROM ( SELECT image.*, row_number() OVER (PARTITION BY review_no ORDER BY image_no ) rnum
							             FROM image
							             WHERE 1=1 ) WHERE rnum = 1) i 
								<where>
									rv.review_no = i.review_no
									<if test="searchCondition != null ">
								        <if test="searchCondition == 0 and searchKeyword !='' ">
								            AND rv.festival_name LIKE '%${searchKeyword}%'
								        </if>
								        <if test="searchCondition == 1 and searchKeyword !='' ">
								            AND rv.addr LIKE '%${searchKeyword}%'
								        </if>
								        <if test="searchCondition == 2 and searchKeyword !='' ">
								        	AND rv.review_hashtag LIKE '%{searchKeyword}%' 
								        </if>
									</if>
								</where>
								ORDER BY rv.review_reg_date DESC ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 	
	 </select>
	  
	 
	 <!-- hashtag 로 찾기.... -->
	 <!-- 안해봄
	 <select id="searchByHashtag" parameterType="search" resultType="int">
	 SELECT COUNT(*)
        FROM(
        select inner_table.review_no
        FROM hashtag h,( SELECT 
        					rv.review_no AS review_no
                         FROM review rv, festival f, users u
                         WHERE rv.festival_no = f.festival_no
                         AND rv.user_id = u.user_id ) inner_table
        WHERE inner_table.review_no = h.review_no
        AND h.hashtag_detail = 'c'
        GROUP BY inner_table.review_no);
	 </select>
	 -->
	 
	 <!-- 안해봄
	 <select id="searchByFestivalName" parameterType="search" resultType="">
	 SELECT inner_table.review_no, inner_table.festival_name
     	FROM hashtag h,( SELECT rv.review_no AS review_no, f.festival_name AS festival_name
                         FROM review rv, festival f, users u
                         WHERE rv.festival_no = f.festival_no
                         AND rv.user_id = u.user_id
                         ) inner_table
        WHERE inner_table.review_no = h.review_no
        AND inner_table.festival_name like '%차성%'
        GROUP BY inner_table.review_no, inner_table.festival_name;
	 </select>
	  -->
	 
	 <!-- 되는거
	 <select id="getTotalCount" parameterType="search" resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT 	*
	  			FROM review rv, festival f, users u 
				<where>
					rv.festival_no = f.festival_no 
			        AND rv.user_id = u.user_id 
					<if test="searchCondition != null ">
				        <if test="searchCondition == 0 and searchKeyword =='' ">
				            AND f.festival_name LIKE '%${searchKeyword}%'
				        </if>
				        <if test="searchCondition == 1 and searchKeyword !='' ">
				            AND f.addr LIKE '%${searchKeyword}%'
				        </if>
					</if>
				</where>
			) countTable						
	 </select>
	  -->
	  
	  <select id="getTotalCount" parameterType="search" resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT 	*
	  			FROM review rv, image i  
	  			<where>
				rv.review_no = i.review_no 
					<if test="searchCondition != null ">
				        <if test="searchCondition == 0 and searchKeyword !='' ">
				            AND rv.festival_name LIKE '%${searchKeyword}%'
				        </if>
				        <if test="searchCondition == 1 and searchKeyword !='' ">
				            AND rv.addr LIKE '%${searchKeyword}%'
				        </if>
				        <if test="searchCondition == 2 and searchKeyword !='' ">
				        	AND rv.review_hashtag LIKE '%{searchKeyword}%' 
				        </if>
					</if>
	  			</where>
				GROUP BY (rv.review_no) 
			) countTable						
	 </select>
	  
</mapper>